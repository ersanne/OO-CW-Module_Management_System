using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BusinessObjects
{
    /// Author: Erik Sanne
    /// Desc: Properties and functions of object type Student.
    /// Last modified by Erik Sanne on 24/10/2017
    public class Student
    {
        private int _matricNo; //Private variable for Matriculation Number
        private string _fName; //Private variable for First Name
        private string _sName; //Private variable for Last Name / Surname
        private double _cwMark; //Private variable for Coursework Mark
        private double _examMark; //Private variable for Exam Mark
        private DateTime _birthDate; //Private variable for Birth Date

        //Matric property 
        public int Matric
        {
            get
            {
                return _matricNo;
            }
            set
            {
                //Validation for matric num value (Between 10001 and 50000)
                if (value < 10001 || value > 50000)
                {
                    throw new ArgumentException("Value not in range (10001-50000)!");
                    
                }
                _matricNo = value;            

            }
        }

        //First Name property
        public string FName
        {
            get
            {
                return _fName;
            }
            set
            {   
                //Validation for first name (Not blank)
                if (string.IsNullOrEmpty(value))
                {
                    throw new ArgumentException("First name can't be empty");

                }
                _fName = value;
            }
        }

        //Last Name / Surname property
        
        public string SName
        {
            get
            {
                return _sName;
            }
            set
            {
                //Validation for last name / surname (Not blank)
                if (string.IsNullOrEmpty(value))
                {
                    throw new ArgumentException("Surname can't be empty");

                }
                _sName = value;
            }
        }
        
        //Coursework mark property
        public double CwMark
        {
            get
            {
                return _cwMark;
            }
            set
            {
                //Validation for coursework mark (Range 0-20)
                if (value < 0 || value > 20)
                {
                    throw new ArgumentException("Coursework Mark is not in range (0-20)");

                }
                _cwMark = value;
            }
        }
        
        //Exam Mark property
        public double ExamMark
        {
            get
            {
                return _examMark;
            }
            set
            {
                //Validation for exam mark (Range 0-40)
                if (value < 0 || value > 40)
                {
                    throw new ArgumentException("Exam Mark is not in range (0-40)");

                }
                _examMark = value;
            }
        }
        
        //Birth Date property
        public DateTime BirthDate
        {
            get
            {
                return _birthDate;
            }
            set
            {
                //Validation for birth date (Not blank)
                if (value == DateTime.MinValue || value == null)
                {
                    throw new ArgumentException("Birth Date cannot be empty");

                }
                _birthDate = value;
            }
        }

        //Get Mark function to calculate total mark
        public double GetMark()
        {
            double mark = _cwMark / 40 + _examMark / 80;
            mark = mark * 100;
            return mark;
        }

        //TotalMark property to display it in the DataGrid
        public string TotalMark
        {
            //Only get method as total mark is autogenerated
            get
            {
                double tmpMark = GetMark(); //Get total mark as double
                tmpMark = Convert.ToInt32(tmpMark); //Round mark by converting to int
                string totalMark = tmpMark.ToString(); //Convert mark to string
                totalMark = totalMark + "%"; //Add Percentage for correct output
                return totalMark; //Return total mark
            }
          
        }

    }
}
